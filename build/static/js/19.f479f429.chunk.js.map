{"version":3,"sources":["pages/dashboard/components/MainChart.js"],"names":["MainChart","state","weather","option","legend","tooltip","dataset","source","xAxis","type","yAxis","series","_this2","this","http","url","method","params","version","city","then","res","data","status","setState","antd_es_message__WEBPACK_IMPORTED_MODULE_6__","error","msg","catch","message","prevProps","prevState","is","Map","props","console","log","Object","_Users_admin_myprojects_react_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_4__","_this$state","currentDayWeather","react__WEBPACK_IMPORTED_MODULE_12___default","a","createElement","antd_es_row__WEBPACK_IMPORTED_MODULE_1__","className","gutter","align","antd_es_col__WEBPACK_IMPORTED_MODULE_3__","sm","md","lg","echarts_for_react__WEBPACK_IMPORTED_MODULE_13___default","tem","tem1","tem2","win","map","item","index","key","win_speed","air","air_level","humidity","air_tips","Component"],"mappings":"6PAMMA,6MACFC,MAAQ,CACJC,QAAS,GACTC,OAAQ,CACJC,OAAQ,GACRC,QAAS,GACTC,QAAS,CACLC,OAAQ,IAEZC,MAAO,CAAEC,KAAM,YACfC,MAAO,GACPC,OAAQ,CACJ,CAAEF,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,6FAKA,IAAAG,EAAAC,KAChBC,YAAK,CACDC,IAAK,qBACLC,OAAQ,MACRC,OAAQ,CACJC,QAAS,KACTC,KAAM,kBAEXC,KAAK,SAAAC,GACAA,EAAIC,MAA4B,OAApBD,EAAIC,KAAKC,OACrBX,EAAKY,SAAS,CACVtB,QAASmB,EAAIC,KAAKA,OAGtBG,EAAA,EAAQC,MAAOL,EAAIC,MAAQD,EAAIC,KAAKK,KAAQ,0CAGlDC,MAAM,SAAAF,GACJD,EAAA,EAAQC,MAAMA,EAAMG,SAAW,qFAIpBC,EAAWC,GACrBC,aAAGC,cAAIH,EAAUR,MAAOW,cAAIpB,KAAKqB,MAAMZ,SACxCa,QAAQC,IAAIvB,KAAKqB,MAAMZ,MACvBT,KAAKW,SAAS,CACVrB,OAAOkC,OAAAC,EAAA,EAAAD,CAAA,GACAxB,KAAKZ,MAAME,OADZ,CAEFG,QAAS,CACLC,OAAQM,KAAKqB,MAAMZ,4CAQ9B,IAAAiB,EACuB1B,KAAKZ,MAAzBE,EADHoC,EACGpC,OAAQD,EADXqC,EACWrC,QACVsC,EAAoBtC,EAAQoB,KAAOpB,EAAQoB,KAAK,GAAK,GAC3D,OACImB,EAAAC,EAAAC,cAAAC,EAAA,GAAKC,UAAU,gBAAgBpC,KAAK,OAAOqC,OAAQ,GAAIC,MAAM,UACzDN,EAAAC,EAAAC,cAAAK,EAAA,GAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrBV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAcvC,OAAQA,KAE1BsC,EAAAC,EAAAC,cAAAK,EAAA,GAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACrBV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBAAqB3C,EAAQiB,MAC5CsB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACXJ,EAAAC,EAAAC,cAAA,SAAIH,EAAkBa,KACtBZ,EAAAC,EAAAC,cAAA,SAAIH,EAAkBc,KAAtB,IAA6Bd,EAAkBe,QAGvDd,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,YAEQH,EAAkBgB,KAAOhB,EAAkBgB,IAAIC,IAAI,SAACC,EAAMC,GAAP,OAAiBlB,EAAAC,EAAAC,cAAA,QAAMiB,IAAKD,GAC1ED,EAD+D,WAK5EjB,EAAAC,EAAAC,cAAA,YAAOH,EAAkBqB,YAE7BpB,EAAAC,EAAAC,cAAA,0CAASH,EAAkBsB,IAA3B,IAAiCtB,EAAkBuB,WACnDtB,EAAAC,EAAAC,cAAA,0CAASH,EAAkBwB,UAC3BvB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gBAAgBL,EAAkByB,oBArF/CC,aA6FTlE","file":"static/js/19.f479f429.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport { Row, Col, message, } from 'antd';\nimport { Map, is } from \"immutable\";\nimport http from \"@/util/request\";\n\nclass MainChart extends Component {\n    state = {\n        weather: {},\n        option: {\n            legend: {},\n            tooltip: {},\n            dataset: {\n                source: []\n            },\n            xAxis: { type: 'category' },\n            yAxis: {},\n            series: [\n                { type: 'bar' },\n                { type: 'bar' },\n                { type: 'bar' }\n            ]\n        }\n    }\n\n    componentDidMount() {\n        http({\n            url: '/dashboard/weather',\n            method: 'get',\n            params: {\n                version: 'v1',\n                city: '北京'\n            }\n        }).then(res => {\n            if (res.data && res.data.status === 'OK') {\n                this.setState({\n                    weather: res.data.data\n                })\n            } else {\n                message.error((res.data && res.data.msg) || '获取天气失败')\n            }\n        }\n        ).catch(error => {\n            message.error(error.message || '获取天气失败')\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!is(Map(prevProps.data), Map(this.props.data))) {\n            console.log(this.props.data)\n            this.setState({\n                option: {\n                    ...this.state.option,\n                    dataset: {\n                        source: this.props.data\n                    }\n                }\n            })\n        }\n    }\n\n\n    render() {\n        const { option, weather } = this.state;\n        const currentDayWeather = weather.data ? weather.data[0] : {};\n        return (\n            <Row className=\"dashboard-row\" type=\"flex\" gutter={24} align=\"middle\">\n                <Col sm={24} md={12} lg={18}>\n                    <ReactEcharts option={option} />\n                </Col>\n                <Col sm={24} md={12} lg={6}>\n                    <div className=\"weather-wrap\">\n                        <div className=\"weather-head\">\n                            <div className=\"weather-head-left\">{weather.city}</div>\n                            <div className=\"weather-head-right\">\n                                <p>{currentDayWeather.tem}</p>\n                                <p>{currentDayWeather.tem1}/{currentDayWeather.tem2}</p>\n                            </div>\n                        </div>\n                        <p>\n                            <span>\n                                {\n                                    currentDayWeather.win && currentDayWeather.win.map((item, index) => <span key={index}>\n                                        {item}&nbsp;\n                                </span>)\n                                }\n                            </span>\n                            <span>{currentDayWeather.win_speed}</span>\n                        </p>\n                        <p>空气质量：{currentDayWeather.air} {currentDayWeather.air_level}</p>\n                        <p>相对湿度：{currentDayWeather.humidity}</p>\n                        <p className=\"weather-tips\">{currentDayWeather.air_tips}</p>\n                    </div>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default MainChart;"],"sourceRoot":""}